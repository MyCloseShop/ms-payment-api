# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile

    environment:
      - SPRING_APP_URL=8080
      - SPRING_DATASOURCE_URL=jdbc:mysql://db-ms-payment:3306/db-ms-payment?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=secret
      - SPRING_RABBITMQ_HOST=host.docker.internal
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    ports:
      - "8087:8080"
    depends_on:
      db-ms-payment:
        condition: service_healthy
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.

  db-ms-payment:
   image: mysql
   restart: always
   user: mysql
   environment:
        - MYSQL_DATABASE=db-ms-payment
        - MYSQL_USER=user
        - MYSQL_PASSWORD=secret
        - MYSQL_ROOT_PASSWORD=secret
   ports:
     - "3312:3306"

   healthcheck:
    test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
    interval: 10s
    timeout: 5s
    retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
